// Google Apps Script Webhook for Safety Support Report
// Deploy this as a web app with access: Anyone, even anonymous

function doPost(e) {
  try {
    // Parse the incoming JSON data
    const reportData = JSON.parse(e.postData.contents);
    
    // Validate required fields
    if (!reportData.category || !reportData.urgency || !reportData.message) {
      return ContentService
        .createTextOutput(JSON.stringify({ 
          success: false, 
          error: 'Missing required fields' 
        }))
        .setMimeType(ContentService.MimeType.JSON);
    }
    
    // Get the active spreadsheet (you'll need to create this)
    const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
    const sheet = spreadsheet.getSheetByName('Reports') || spreadsheet.getActiveSheet();
    
    // Add headers automatically if sheet is empty (first submission)
    if (sheet.getLastRow() === 0) {
      const headers = [
        'Timestamp',
        'Category',
        'Urgency',
        'Description',
        'Location',
        'Anonymous',
        'Auto Tags',
        'Report Timestamp',
        'Latitude',
        'Longitude',
        'Platform',
        'Impact',
        'Perpetrator',
        'Incident Date'
      ];
      sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
    }
    
    // Generate server-side tags and combine with client-side tags
    const serverTags = generateAutoTags(reportData.message, reportData.category);
    const clientTags = reportData.autoGeneratedTags || [];
    const combinedTags = [...new Set([...serverTags, ...clientTags])];
    
    // Prepare row data for Google Sheets
    const rowData = [
      new Date(), // Timestamp
      reportData.category,
      reportData.urgency,
      reportData.message,
      reportData.location || '',
      reportData.isAnonymous ? 'Yes' : 'No',
      combinedTags.join(', '),
      reportData.timestamp || new Date().toISOString(),
      reportData.latitude || '',
      reportData.longitude || '',
      reportData.platform || '',
      reportData.impact ? reportData.impact.join(', ') : '',
      reportData.perpetrator || '',
      reportData.date || new Date().toISOString().split('T')[0]
    ];
    
    // Append the data to the sheet
    sheet.appendRow(rowData);
    
    // Return success response
    return ContentService
      .createTextOutput(JSON.stringify({ 
        success: true, 
        message: 'Report saved successfully',
        reportId: sheet.getLastRow()
      }))
      .setMimeType(ContentService.MimeType.JSON);
      
  } catch (error) {
    // Return error response
    return ContentService
      .createTextOutput(JSON.stringify({ 
        success: false, 
        error: error.toString() 
      }))
      .setMimeType(ContentService.MimeType.JSON);
  }
}

function generateAutoTags(description, category) {
  const tags = [];
  
  // Category-based tags
  const categoryTags = {
    'gender_based_violence': ['GBV', 'Violence', 'Gender'],
    'child_protection': ['Child', 'Protection', 'Abuse'],
    'forced_displacement': ['Displacement', 'Refugee', 'Conflict'],
    'food_insecurity': ['Food', 'Hunger', 'Nutrition'],
    'water_sanitation': ['Water', 'Sanitation', 'Hygiene'],
    'shelter_issues': ['Shelter', 'Housing', 'Accommodation'],
    'health_emergencies': ['Health', 'Medical', 'Emergency']
  };
  
  if (categoryTags[category]) {
    tags.push(...categoryTags[category]);
  }
  
  // Content-based tags (simple keyword detection)
  const descriptionLower = description.toLowerCase();
  
  if (descriptionLower.includes('urgent') || descriptionLower.includes('emergency')) {
    tags.push('Urgent');
  }
  if (descriptionLower.includes('child') || descriptionLower.includes('minor')) {
    tags.push('Child');
  }
  if (descriptionLower.includes('violence') || descriptionLower.includes('attack')) {
    tags.push('Violence');
  }
  if (descriptionLower.includes('food') || descriptionLower.includes('hunger')) {
    tags.push('Food');
  }
  if (descriptionLower.includes('water') || descriptionLower.includes('drink')) {
    tags.push('Water');
  }
  if (descriptionLower.includes('shelter') || descriptionLower.includes('home')) {
    tags.push('Shelter');
  }
  if (descriptionLower.includes('health') || descriptionLower.includes('medical')) {
    tags.push('Health');
  }
  
  // Remove duplicates and return
  return [...new Set(tags)];
}

function doGet(e) {
  // Handle GET requests (for testing)
  return ContentService
    .createTextOutput(JSON.stringify({ 
      message: 'Safety Support Report Webhook is running',
      status: 'active'
    }))
    .setMimeType(ContentService.MimeType.JSON);
}

// Setup function to create headers if needed
function setupSheet() {
  const spreadsheet = SpreadsheetApp.getActiveSpreadsheet();
  const sheet = spreadsheet.getSheetByName('Reports') || spreadsheet.getActiveSheet();
  
  // Set headers if sheet is empty
  if (sheet.getLastRow() === 0) {
    const headers = [
      'Timestamp',
      'Category',
      'Urgency',
      'Description',
      'Location',
      'Anonymous',
      'Auto Tags',
      'Report Timestamp',
      'Latitude',
      'Longitude',
      'Platform',
      'Impact',
      'Perpetrator',
      'Incident Date'
    ];
    sheet.getRange(1, 1, 1, headers.length).setValues([headers]);
  }
} 